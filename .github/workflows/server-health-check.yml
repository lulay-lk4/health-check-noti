# This is a basic workflow to help you get started with Actions

name: Health Check Action [Schedule]
# Controls when the workflow will run
on:
  schedule:
    - cron: "*/5 * * * *" # every 5 minutes

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  check-server:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: monitoring
    env:
      HEALTH_CHECK_URL: ${{ vars.HEALTH_CHECK_URL }}
      SERVER_STATE: ${{ vars.SERVER_STATE }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Get Previous Server State
        id: prev
        run: |
          echo "prev_state=${SERVER_STATE}" >> $GITHUB_OUTPUT

      - name: Debug
        run: |
          echo "Previous state: ${{ steps.prev.outputs.prev_state }}"

      - name: Check Server Health
        id: check
        run: |
          if curl -fs "${HEALTH_CHECK_URL}"; then
            echo "status=UP" >> $GITHUB_OUTPUT
          else
            echo "status=DOWN" >> $GITHUB_OUTPUT
          fi

      - name: Set Status Emoji
        id: emoji
        run: |
          if [[ "${{ steps.check.outputs.status }}" == "UP" ]]; then
            echo "emoji=ðŸŸ¢" >> $GITHUB_OUTPUT
          else
            echo "emoji=ðŸ”´" >> $GITHUB_OUTPUT
          fi
      
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Send Alert to Telegram
        if: steps.check.outputs.status != steps.prev.outputs.prev_state
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: "${{ steps.emoji.outputs.emoji }} Server is ${{ steps.check.outputs.status }}!"

      - name: Save Current Server State
        if: steps.check.outputs.status != steps.prev.outputs.prev_state
        run: |
          curl -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/environments/monitoring/variables/SERVER_STATE \
            -d '{"name":"SERVER_STATE","value":"${{ steps.check.outputs.status }}"}'
